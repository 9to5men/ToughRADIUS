#
# Autogenerated by Thrift Compiler (0.10.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
import sys

from thrift.transport import TTransport


class RadiusConst(object):
    ACCESS_REQUEST = 1
    ACCESS_ACCEPT = 2
    ACCESS_REJECT = 3
    ACCOUNTING_REQUEST = 4
    ACCOUNTING_RESPONSE = 5
    ACCOUNT_CHALLENGE = 11
    STATUS_SERVER = 12
    STATUS_CLIENT = 13
    DISSCONNECT_REQUEST = 40
    DISSCONNECT_ACK = 41
    DISSCONNECT_NAK = 42
    COA_REQUEST = 43
    COA_ACK = 44
    COA_NAK = 45

    _VALUES_TO_NAMES = {
        1: "ACCESS_REQUEST",
        2: "ACCESS_ACCEPT",
        3: "ACCESS_REJECT",
        4: "ACCOUNTING_REQUEST",
        5: "ACCOUNTING_RESPONSE",
        11: "ACCOUNT_CHALLENGE",
        12: "STATUS_SERVER",
        13: "STATUS_CLIENT",
        40: "DISSCONNECT_REQUEST",
        41: "DISSCONNECT_ACK",
        42: "DISSCONNECT_NAK",
        43: "COA_REQUEST",
        44: "COA_ACK",
        45: "COA_NAK",
    }

    _NAMES_TO_VALUES = {
        "ACCESS_REQUEST": 1,
        "ACCESS_ACCEPT": 2,
        "ACCESS_REJECT": 3,
        "ACCOUNTING_REQUEST": 4,
        "ACCOUNTING_RESPONSE": 5,
        "ACCOUNT_CHALLENGE": 11,
        "STATUS_SERVER": 12,
        "STATUS_CLIENT": 13,
        "DISSCONNECT_REQUEST": 40,
        "DISSCONNECT_ACK": 41,
        "DISSCONNECT_NAK": 42,
        "COA_REQUEST": 43,
        "COA_ACK": 44,
        "COA_NAK": 45,
    }


class StatusType(object):
    STATUS_TYPE_START = 1
    STATUS_TYPE_STOP = 2
    STATUS_TYPE_UPDATE = 3
    STATUS_TYPE_UNLOCK = 4
    STATUS_TYPE_CHECK_ONLINE = 5
    STATUS_TYPE_ACCT_ON = 7
    STATUS_TYPE_ACCT_OFF = 8

    _VALUES_TO_NAMES = {
        1: "STATUS_TYPE_START",
        2: "STATUS_TYPE_STOP",
        3: "STATUS_TYPE_UPDATE",
        4: "STATUS_TYPE_UNLOCK",
        5: "STATUS_TYPE_CHECK_ONLINE",
        7: "STATUS_TYPE_ACCT_ON",
        8: "STATUS_TYPE_ACCT_OFF",
    }

    _NAMES_TO_VALUES = {
        "STATUS_TYPE_START": 1,
        "STATUS_TYPE_STOP": 2,
        "STATUS_TYPE_UPDATE": 3,
        "STATUS_TYPE_UNLOCK": 4,
        "STATUS_TYPE_CHECK_ONLINE": 5,
        "STATUS_TYPE_ACCT_ON": 7,
        "STATUS_TYPE_ACCT_OFF": 8,
    }


class RadiusFlag(object):
    CHECK_PASSWD = 1
    NOT_CHECK_PASSWD = 0

    _VALUES_TO_NAMES = {
        1: "CHECK_PASSWD",
        0: "NOT_CHECK_PASSWD",
    }

    _NAMES_TO_VALUES = {
        "CHECK_PASSWD": 1,
        "NOT_CHECK_PASSWD": 0,
    }


class RadiusErrors(object):
    USER_PASSWORD_ERROR = 1000
    USER_EXPIRED = 1001
    USER_ONLINE_LIMIT = 1002
    USER_NOT_EXISTS = 1003
    USER_ALREADY_ONLINE = 1004
    USER_MAC_BIND_ONLINE = 1005
    USER_VLAN_BIND_ONLINE = 1006
    USER_STATUS_ERROR = 1007
    USER_LICENSE_LIMIT = 1008
    USER_QUOTA_LOW = 1009
    SERVER_PROC_ERROR = 9998
    UNKNOW_ERROR = 9999

    _VALUES_TO_NAMES = {
        1000: "USER_PASSWORD_ERROR",
        1001: "USER_EXPIRED",
        1002: "USER_ONLINE_LIMIT",
        1003: "USER_NOT_EXISTS",
        1004: "USER_ALREADY_ONLINE",
        1005: "USER_MAC_BIND_ONLINE",
        1006: "USER_VLAN_BIND_ONLINE",
        1007: "USER_STATUS_ERROR",
        1008: "USER_LICENSE_LIMIT",
        1009: "USER_QUOTA_LOW",
        9998: "SERVER_PROC_ERROR",
        9999: "UNKNOW_ERROR",
    }

    _NAMES_TO_VALUES = {
        "USER_PASSWORD_ERROR": 1000,
        "USER_EXPIRED": 1001,
        "USER_ONLINE_LIMIT": 1002,
        "USER_NOT_EXISTS": 1003,
        "USER_ALREADY_ONLINE": 1004,
        "USER_MAC_BIND_ONLINE": 1005,
        "USER_VLAN_BIND_ONLINE": 1006,
        "USER_STATUS_ERROR": 1007,
        "USER_LICENSE_LIMIT": 1008,
        "USER_QUOTA_LOW": 1009,
        "SERVER_PROC_ERROR": 9998,
        "UNKNOW_ERROR": 9999,
    }


class AccessRequest(object):
    """
    Attributes:
     - nasid
     - nasip
     - username
     - mac_addr
     - vlanid1
     - vlanid2
     - nas_port_id
     - nas_port_type
     - nas_class
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRING, 'nasid', 'UTF8', None, ),  # 1
        (2, TType.STRING, 'nasip', 'UTF8', None, ),  # 2
        (3, TType.STRING, 'username', 'UTF8', None, ),  # 3
        (4, TType.STRING, 'mac_addr', 'UTF8', None, ),  # 4
        (5, TType.I32, 'vlanid1', None, 0, ),  # 5
        (6, TType.I32, 'vlanid2', None, 0, ),  # 6
        (7, TType.STRING, 'nas_port_id', 'UTF8', None, ),  # 7
        (8, TType.I32, 'nas_port_type', None, 0, ),  # 8
        (9, TType.STRING, 'nas_class', 'UTF8', None, ),  # 9
    )

    def __init__(self, nasid=None, nasip=None, username=None, mac_addr=None, vlanid1=thrift_spec[5][4], vlanid2=thrift_spec[6][4], nas_port_id=None, nas_port_type=thrift_spec[8][4], nas_class=None,):
        self.nasid = nasid
        self.nasip = nasip
        self.username = username
        self.mac_addr = mac_addr
        self.vlanid1 = vlanid1
        self.vlanid2 = vlanid2
        self.nas_port_id = nas_port_id
        self.nas_port_type = nas_port_type
        self.nas_class = nas_class

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.nasid = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.nasip = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.username = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.mac_addr = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I32:
                    self.vlanid1 = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I32:
                    self.vlanid2 = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRING:
                    self.nas_port_id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.I32:
                    self.nas_port_type = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.STRING:
                    self.nas_class = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('AccessRequest')
        if self.nasid is not None:
            oprot.writeFieldBegin('nasid', TType.STRING, 1)
            oprot.writeString(self.nasid.encode('utf-8') if sys.version_info[0] == 2 else self.nasid)
            oprot.writeFieldEnd()
        if self.nasip is not None:
            oprot.writeFieldBegin('nasip', TType.STRING, 2)
            oprot.writeString(self.nasip.encode('utf-8') if sys.version_info[0] == 2 else self.nasip)
            oprot.writeFieldEnd()
        if self.username is not None:
            oprot.writeFieldBegin('username', TType.STRING, 3)
            oprot.writeString(self.username.encode('utf-8') if sys.version_info[0] == 2 else self.username)
            oprot.writeFieldEnd()
        if self.mac_addr is not None:
            oprot.writeFieldBegin('mac_addr', TType.STRING, 4)
            oprot.writeString(self.mac_addr.encode('utf-8') if sys.version_info[0] == 2 else self.mac_addr)
            oprot.writeFieldEnd()
        if self.vlanid1 is not None:
            oprot.writeFieldBegin('vlanid1', TType.I32, 5)
            oprot.writeI32(self.vlanid1)
            oprot.writeFieldEnd()
        if self.vlanid2 is not None:
            oprot.writeFieldBegin('vlanid2', TType.I32, 6)
            oprot.writeI32(self.vlanid2)
            oprot.writeFieldEnd()
        if self.nas_port_id is not None:
            oprot.writeFieldBegin('nas_port_id', TType.STRING, 7)
            oprot.writeString(self.nas_port_id.encode('utf-8') if sys.version_info[0] == 2 else self.nas_port_id)
            oprot.writeFieldEnd()
        if self.nas_port_type is not None:
            oprot.writeFieldBegin('nas_port_type', TType.I32, 8)
            oprot.writeI32(self.nas_port_type)
            oprot.writeFieldEnd()
        if self.nas_class is not None:
            oprot.writeFieldBegin('nas_class', TType.STRING, 9)
            oprot.writeString(self.nas_class.encode('utf-8') if sys.version_info[0] == 2 else self.nas_class)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.nasid is None:
            raise TProtocolException(message='Required field nasid is unset!')
        if self.nasip is None:
            raise TProtocolException(message='Required field nasip is unset!')
        if self.username is None:
            raise TProtocolException(message='Required field username is unset!')
        if self.mac_addr is None:
            raise TProtocolException(message='Required field mac_addr is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class FindBrasRequest(object):
    """
    Attributes:
     - nasid
     - nasip
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRING, 'nasid', 'UTF8', None, ),  # 1
        (2, TType.STRING, 'nasip', 'UTF8', None, ),  # 2
    )

    def __init__(self, nasid=None, nasip=None,):
        self.nasid = nasid
        self.nasip = nasip

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.nasid = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.nasip = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('FindBrasRequest')
        if self.nasid is not None:
            oprot.writeFieldBegin('nasid', TType.STRING, 1)
            oprot.writeString(self.nasid.encode('utf-8') if sys.version_info[0] == 2 else self.nasid)
            oprot.writeFieldEnd()
        if self.nasip is not None:
            oprot.writeFieldBegin('nasip', TType.STRING, 2)
            oprot.writeString(self.nasip.encode('utf-8') if sys.version_info[0] == 2 else self.nasip)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.nasid is None:
            raise TProtocolException(message='Required field nasid is unset!')
        if self.nasip is None:
            raise TProtocolException(message='Required field nasip is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class FindBrasResponse(object):
    """
    Attributes:
     - nasid
     - nasip
     - vendor
     - secret
     - status
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRING, 'nasid', 'UTF8', None, ),  # 1
        (2, TType.STRING, 'nasip', 'UTF8', None, ),  # 2
        (3, TType.I32, 'vendor', None, None, ),  # 3
        (4, TType.STRING, 'secret', 'UTF8', None, ),  # 4
        (5, TType.STRING, 'status', 'UTF8', None, ),  # 5
    )

    def __init__(self, nasid=None, nasip=None, vendor=None, secret=None, status=None,):
        self.nasid = nasid
        self.nasip = nasip
        self.vendor = vendor
        self.secret = secret
        self.status = status

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.nasid = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.nasip = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.vendor = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.secret = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.status = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('FindBrasResponse')
        if self.nasid is not None:
            oprot.writeFieldBegin('nasid', TType.STRING, 1)
            oprot.writeString(self.nasid.encode('utf-8') if sys.version_info[0] == 2 else self.nasid)
            oprot.writeFieldEnd()
        if self.nasip is not None:
            oprot.writeFieldBegin('nasip', TType.STRING, 2)
            oprot.writeString(self.nasip.encode('utf-8') if sys.version_info[0] == 2 else self.nasip)
            oprot.writeFieldEnd()
        if self.vendor is not None:
            oprot.writeFieldBegin('vendor', TType.I32, 3)
            oprot.writeI32(self.vendor)
            oprot.writeFieldEnd()
        if self.secret is not None:
            oprot.writeFieldBegin('secret', TType.STRING, 4)
            oprot.writeString(self.secret.encode('utf-8') if sys.version_info[0] == 2 else self.secret)
            oprot.writeFieldEnd()
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.STRING, 5)
            oprot.writeString(self.status.encode('utf-8') if sys.version_info[0] == 2 else self.status)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.nasid is None:
            raise TProtocolException(message='Required field nasid is unset!')
        if self.nasip is None:
            raise TProtocolException(message='Required field nasip is unset!')
        if self.vendor is None:
            raise TProtocolException(message='Required field vendor is unset!')
        if self.secret is None:
            raise TProtocolException(message='Required field secret is unset!')
        if self.status is None:
            raise TProtocolException(message='Required field status is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class AccessResponse(object):
    """
    Attributes:
     - code
     - message
     - check_pwd
     - password
     - input_rate
     - output_rate
     - domain
     - policy
     - addr_pool
     - ip_addr
     - proxy_user
     - proxy_pwd
     - proxy_vlan
     - session_timeout
     - radius_attrs
    """

    thrift_spec = (
        None,  # 0
        (1, TType.I32, 'code', None, None, ),  # 1
        (2, TType.STRING, 'message', 'UTF8', None, ),  # 2
        (3, TType.I32, 'check_pwd', None, 1, ),  # 3
        (4, TType.STRING, 'password', 'UTF8', None, ),  # 4
        (5, TType.I32, 'input_rate', None, 0, ),  # 5
        (6, TType.I32, 'output_rate', None, 0, ),  # 6
        (7, TType.STRING, 'domain', 'UTF8', None, ),  # 7
        (8, TType.STRING, 'policy', 'UTF8', None, ),  # 8
        (9, TType.STRING, 'addr_pool', 'UTF8', None, ),  # 9
        (10, TType.STRING, 'ip_addr', 'UTF8', None, ),  # 10
        (11, TType.STRING, 'proxy_user', 'UTF8', None, ),  # 11
        (12, TType.STRING, 'proxy_pwd', 'UTF8', None, ),  # 12
        (13, TType.STRING, 'proxy_vlan', 'UTF8', None, ),  # 13
        (14, TType.I32, 'session_timeout', None, 0, ),  # 14
        (15, TType.MAP, 'radius_attrs', (TType.STRING, 'UTF8', TType.STRING, 'UTF8', False), None, ),  # 15
    )

    def __init__(self, code=None, message=None, check_pwd=thrift_spec[3][4], password=None, input_rate=thrift_spec[5][4], output_rate=thrift_spec[6][4], domain=None, policy=None, addr_pool=None, ip_addr=None, proxy_user=None, proxy_pwd=None, proxy_vlan=None, session_timeout=thrift_spec[14][4], radius_attrs=None,):
        self.code = code
        self.message = message
        self.check_pwd = check_pwd
        self.password = password
        self.input_rate = input_rate
        self.output_rate = output_rate
        self.domain = domain
        self.policy = policy
        self.addr_pool = addr_pool
        self.ip_addr = ip_addr
        self.proxy_user = proxy_user
        self.proxy_pwd = proxy_pwd
        self.proxy_vlan = proxy_vlan
        self.session_timeout = session_timeout
        self.radius_attrs = radius_attrs

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.code = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.message = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.check_pwd = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.password = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I32:
                    self.input_rate = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I32:
                    self.output_rate = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRING:
                    self.domain = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.STRING:
                    self.policy = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.STRING:
                    self.addr_pool = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.STRING:
                    self.ip_addr = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.STRING:
                    self.proxy_user = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.STRING:
                    self.proxy_pwd = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 13:
                if ftype == TType.STRING:
                    self.proxy_vlan = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 14:
                if ftype == TType.I32:
                    self.session_timeout = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 15:
                if ftype == TType.MAP:
                    self.radius_attrs = {}
                    (_ktype1, _vtype2, _size0) = iprot.readMapBegin()
                    for _i4 in range(_size0):
                        _key5 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        _val6 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.radius_attrs[_key5] = _val6
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('AccessResponse')
        if self.code is not None:
            oprot.writeFieldBegin('code', TType.I32, 1)
            oprot.writeI32(self.code)
            oprot.writeFieldEnd()
        if self.message is not None:
            oprot.writeFieldBegin('message', TType.STRING, 2)
            oprot.writeString(self.message.encode('utf-8') if sys.version_info[0] == 2 else self.message)
            oprot.writeFieldEnd()
        if self.check_pwd is not None:
            oprot.writeFieldBegin('check_pwd', TType.I32, 3)
            oprot.writeI32(self.check_pwd)
            oprot.writeFieldEnd()
        if self.password is not None:
            oprot.writeFieldBegin('password', TType.STRING, 4)
            oprot.writeString(self.password.encode('utf-8') if sys.version_info[0] == 2 else self.password)
            oprot.writeFieldEnd()
        if self.input_rate is not None:
            oprot.writeFieldBegin('input_rate', TType.I32, 5)
            oprot.writeI32(self.input_rate)
            oprot.writeFieldEnd()
        if self.output_rate is not None:
            oprot.writeFieldBegin('output_rate', TType.I32, 6)
            oprot.writeI32(self.output_rate)
            oprot.writeFieldEnd()
        if self.domain is not None:
            oprot.writeFieldBegin('domain', TType.STRING, 7)
            oprot.writeString(self.domain.encode('utf-8') if sys.version_info[0] == 2 else self.domain)
            oprot.writeFieldEnd()
        if self.policy is not None:
            oprot.writeFieldBegin('policy', TType.STRING, 8)
            oprot.writeString(self.policy.encode('utf-8') if sys.version_info[0] == 2 else self.policy)
            oprot.writeFieldEnd()
        if self.addr_pool is not None:
            oprot.writeFieldBegin('addr_pool', TType.STRING, 9)
            oprot.writeString(self.addr_pool.encode('utf-8') if sys.version_info[0] == 2 else self.addr_pool)
            oprot.writeFieldEnd()
        if self.ip_addr is not None:
            oprot.writeFieldBegin('ip_addr', TType.STRING, 10)
            oprot.writeString(self.ip_addr.encode('utf-8') if sys.version_info[0] == 2 else self.ip_addr)
            oprot.writeFieldEnd()
        if self.proxy_user is not None:
            oprot.writeFieldBegin('proxy_user', TType.STRING, 11)
            oprot.writeString(self.proxy_user.encode('utf-8') if sys.version_info[0] == 2 else self.proxy_user)
            oprot.writeFieldEnd()
        if self.proxy_pwd is not None:
            oprot.writeFieldBegin('proxy_pwd', TType.STRING, 12)
            oprot.writeString(self.proxy_pwd.encode('utf-8') if sys.version_info[0] == 2 else self.proxy_pwd)
            oprot.writeFieldEnd()
        if self.proxy_vlan is not None:
            oprot.writeFieldBegin('proxy_vlan', TType.STRING, 13)
            oprot.writeString(self.proxy_vlan.encode('utf-8') if sys.version_info[0] == 2 else self.proxy_vlan)
            oprot.writeFieldEnd()
        if self.session_timeout is not None:
            oprot.writeFieldBegin('session_timeout', TType.I32, 14)
            oprot.writeI32(self.session_timeout)
            oprot.writeFieldEnd()
        if self.radius_attrs is not None:
            oprot.writeFieldBegin('radius_attrs', TType.MAP, 15)
            oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.radius_attrs))
            for kiter7, viter8 in self.radius_attrs.items():
                oprot.writeString(kiter7.encode('utf-8') if sys.version_info[0] == 2 else kiter7)
                oprot.writeString(viter8.encode('utf-8') if sys.version_info[0] == 2 else viter8)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.code is None:
            raise TProtocolException(message='Required field code is unset!')
        if self.check_pwd is None:
            raise TProtocolException(message='Required field check_pwd is unset!')
        if self.session_timeout is None:
            raise TProtocolException(message='Required field session_timeout is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class AccountingRequest(object):
    """
    Attributes:
     - nas_id
     - username
     - mac_addr
     - nas_addr
     - nas_paddr
     - nas_port
     - nas_port_id
     - nas_port_type
     - nas_class
     - service_type
     - framed_ipaddr
     - framed_netmask
     - acct_status_type
     - acct_session_id
     - session_timeout
     - acct_input_total
     - acct_output_total
     - acct_start_time
     - acct_session_time
     - acct_input_packets
     - acct_output_packets
     - acct_terminate_cause
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRING, 'nas_id', 'UTF8', None, ),  # 1
        (2, TType.STRING, 'username', 'UTF8', None, ),  # 2
        (3, TType.STRING, 'mac_addr', 'UTF8', None, ),  # 3
        (4, TType.STRING, 'nas_addr', 'UTF8', None, ),  # 4
        (5, TType.STRING, 'nas_paddr', 'UTF8', None, ),  # 5
        (6, TType.I32, 'nas_port', None, None, ),  # 6
        (7, TType.STRING, 'nas_port_id', 'UTF8', None, ),  # 7
        (8, TType.I32, 'nas_port_type', None, None, ),  # 8
        (9, TType.STRING, 'nas_class', 'UTF8', None, ),  # 9
        (10, TType.I32, 'service_type', None, None, ),  # 10
        (11, TType.STRING, 'framed_ipaddr', 'UTF8', None, ),  # 11
        (12, TType.STRING, 'framed_netmask', 'UTF8', None, ),  # 12
        (13, TType.I32, 'acct_status_type', None, None, ),  # 13
        (14, TType.STRING, 'acct_session_id', 'UTF8', None, ),  # 14
        (15, TType.I32, 'session_timeout', None, None, ),  # 15
        (16, TType.I64, 'acct_input_total', None, None, ),  # 16
        (17, TType.I64, 'acct_output_total', None, None, ),  # 17
        (18, TType.STRING, 'acct_start_time', 'UTF8', None, ),  # 18
        (19, TType.I32, 'acct_session_time', None, None, ),  # 19
        (20, TType.I32, 'acct_input_packets', None, None, ),  # 20
        (21, TType.I32, 'acct_output_packets', None, None, ),  # 21
        (22, TType.I32, 'acct_terminate_cause', None, None, ),  # 22
    )

    def __init__(self, nas_id=None, username=None, mac_addr=None, nas_addr=None, nas_paddr=None, nas_port=None, nas_port_id=None, nas_port_type=None, nas_class=None, service_type=None, framed_ipaddr=None, framed_netmask=None, acct_status_type=None, acct_session_id=None, session_timeout=None, acct_input_total=None, acct_output_total=None, acct_start_time=None, acct_session_time=None, acct_input_packets=None, acct_output_packets=None, acct_terminate_cause=None,):
        self.nas_id = nas_id
        self.username = username
        self.mac_addr = mac_addr
        self.nas_addr = nas_addr
        self.nas_paddr = nas_paddr
        self.nas_port = nas_port
        self.nas_port_id = nas_port_id
        self.nas_port_type = nas_port_type
        self.nas_class = nas_class
        self.service_type = service_type
        self.framed_ipaddr = framed_ipaddr
        self.framed_netmask = framed_netmask
        self.acct_status_type = acct_status_type
        self.acct_session_id = acct_session_id
        self.session_timeout = session_timeout
        self.acct_input_total = acct_input_total
        self.acct_output_total = acct_output_total
        self.acct_start_time = acct_start_time
        self.acct_session_time = acct_session_time
        self.acct_input_packets = acct_input_packets
        self.acct_output_packets = acct_output_packets
        self.acct_terminate_cause = acct_terminate_cause

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.nas_id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.username = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.mac_addr = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.nas_addr = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.nas_paddr = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I32:
                    self.nas_port = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRING:
                    self.nas_port_id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.I32:
                    self.nas_port_type = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.STRING:
                    self.nas_class = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.I32:
                    self.service_type = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.STRING:
                    self.framed_ipaddr = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.STRING:
                    self.framed_netmask = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 13:
                if ftype == TType.I32:
                    self.acct_status_type = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 14:
                if ftype == TType.STRING:
                    self.acct_session_id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 15:
                if ftype == TType.I32:
                    self.session_timeout = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 16:
                if ftype == TType.I64:
                    self.acct_input_total = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 17:
                if ftype == TType.I64:
                    self.acct_output_total = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 18:
                if ftype == TType.STRING:
                    self.acct_start_time = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 19:
                if ftype == TType.I32:
                    self.acct_session_time = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 20:
                if ftype == TType.I32:
                    self.acct_input_packets = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 21:
                if ftype == TType.I32:
                    self.acct_output_packets = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 22:
                if ftype == TType.I32:
                    self.acct_terminate_cause = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('AccountingRequest')
        if self.nas_id is not None:
            oprot.writeFieldBegin('nas_id', TType.STRING, 1)
            oprot.writeString(self.nas_id.encode('utf-8') if sys.version_info[0] == 2 else self.nas_id)
            oprot.writeFieldEnd()
        if self.username is not None:
            oprot.writeFieldBegin('username', TType.STRING, 2)
            oprot.writeString(self.username.encode('utf-8') if sys.version_info[0] == 2 else self.username)
            oprot.writeFieldEnd()
        if self.mac_addr is not None:
            oprot.writeFieldBegin('mac_addr', TType.STRING, 3)
            oprot.writeString(self.mac_addr.encode('utf-8') if sys.version_info[0] == 2 else self.mac_addr)
            oprot.writeFieldEnd()
        if self.nas_addr is not None:
            oprot.writeFieldBegin('nas_addr', TType.STRING, 4)
            oprot.writeString(self.nas_addr.encode('utf-8') if sys.version_info[0] == 2 else self.nas_addr)
            oprot.writeFieldEnd()
        if self.nas_paddr is not None:
            oprot.writeFieldBegin('nas_paddr', TType.STRING, 5)
            oprot.writeString(self.nas_paddr.encode('utf-8') if sys.version_info[0] == 2 else self.nas_paddr)
            oprot.writeFieldEnd()
        if self.nas_port is not None:
            oprot.writeFieldBegin('nas_port', TType.I32, 6)
            oprot.writeI32(self.nas_port)
            oprot.writeFieldEnd()
        if self.nas_port_id is not None:
            oprot.writeFieldBegin('nas_port_id', TType.STRING, 7)
            oprot.writeString(self.nas_port_id.encode('utf-8') if sys.version_info[0] == 2 else self.nas_port_id)
            oprot.writeFieldEnd()
        if self.nas_port_type is not None:
            oprot.writeFieldBegin('nas_port_type', TType.I32, 8)
            oprot.writeI32(self.nas_port_type)
            oprot.writeFieldEnd()
        if self.nas_class is not None:
            oprot.writeFieldBegin('nas_class', TType.STRING, 9)
            oprot.writeString(self.nas_class.encode('utf-8') if sys.version_info[0] == 2 else self.nas_class)
            oprot.writeFieldEnd()
        if self.service_type is not None:
            oprot.writeFieldBegin('service_type', TType.I32, 10)
            oprot.writeI32(self.service_type)
            oprot.writeFieldEnd()
        if self.framed_ipaddr is not None:
            oprot.writeFieldBegin('framed_ipaddr', TType.STRING, 11)
            oprot.writeString(self.framed_ipaddr.encode('utf-8') if sys.version_info[0] == 2 else self.framed_ipaddr)
            oprot.writeFieldEnd()
        if self.framed_netmask is not None:
            oprot.writeFieldBegin('framed_netmask', TType.STRING, 12)
            oprot.writeString(self.framed_netmask.encode('utf-8') if sys.version_info[0] == 2 else self.framed_netmask)
            oprot.writeFieldEnd()
        if self.acct_status_type is not None:
            oprot.writeFieldBegin('acct_status_type', TType.I32, 13)
            oprot.writeI32(self.acct_status_type)
            oprot.writeFieldEnd()
        if self.acct_session_id is not None:
            oprot.writeFieldBegin('acct_session_id', TType.STRING, 14)
            oprot.writeString(self.acct_session_id.encode('utf-8') if sys.version_info[0] == 2 else self.acct_session_id)
            oprot.writeFieldEnd()
        if self.session_timeout is not None:
            oprot.writeFieldBegin('session_timeout', TType.I32, 15)
            oprot.writeI32(self.session_timeout)
            oprot.writeFieldEnd()
        if self.acct_input_total is not None:
            oprot.writeFieldBegin('acct_input_total', TType.I64, 16)
            oprot.writeI64(self.acct_input_total)
            oprot.writeFieldEnd()
        if self.acct_output_total is not None:
            oprot.writeFieldBegin('acct_output_total', TType.I64, 17)
            oprot.writeI64(self.acct_output_total)
            oprot.writeFieldEnd()
        if self.acct_start_time is not None:
            oprot.writeFieldBegin('acct_start_time', TType.STRING, 18)
            oprot.writeString(self.acct_start_time.encode('utf-8') if sys.version_info[0] == 2 else self.acct_start_time)
            oprot.writeFieldEnd()
        if self.acct_session_time is not None:
            oprot.writeFieldBegin('acct_session_time', TType.I32, 19)
            oprot.writeI32(self.acct_session_time)
            oprot.writeFieldEnd()
        if self.acct_input_packets is not None:
            oprot.writeFieldBegin('acct_input_packets', TType.I32, 20)
            oprot.writeI32(self.acct_input_packets)
            oprot.writeFieldEnd()
        if self.acct_output_packets is not None:
            oprot.writeFieldBegin('acct_output_packets', TType.I32, 21)
            oprot.writeI32(self.acct_output_packets)
            oprot.writeFieldEnd()
        if self.acct_terminate_cause is not None:
            oprot.writeFieldBegin('acct_terminate_cause', TType.I32, 22)
            oprot.writeI32(self.acct_terminate_cause)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class AccountingResponse(object):
    """
    Attributes:
     - code
     - message
    """

    thrift_spec = (
        None,  # 0
        (1, TType.I32, 'code', None, 0, ),  # 1
        (2, TType.STRING, 'message', 'UTF8', None, ),  # 2
    )

    def __init__(self, code=thrift_spec[1][4], message=None,):
        self.code = code
        self.message = message

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.code = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.message = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('AccountingResponse')
        if self.code is not None:
            oprot.writeFieldBegin('code', TType.I32, 1)
            oprot.writeI32(self.code)
            oprot.writeFieldEnd()
        if self.message is not None:
            oprot.writeFieldBegin('message', TType.STRING, 2)
            oprot.writeString(self.message.encode('utf-8') if sys.version_info[0] == 2 else self.message)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class LoggerRequest(object):
    """
    Attributes:
     - host
     - submodule
     - level
     - username
     - message
     - attrs
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRING, 'host', 'UTF8', None, ),  # 1
        (2, TType.STRING, 'submodule', 'UTF8', None, ),  # 2
        (3, TType.STRING, 'level', 'UTF8', None, ),  # 3
        (4, TType.STRING, 'username', 'UTF8', None, ),  # 4
        (5, TType.STRING, 'message', 'UTF8', None, ),  # 5
        (6, TType.MAP, 'attrs', (TType.STRING, 'UTF8', TType.STRING, 'UTF8', False), None, ),  # 6
    )

    def __init__(self, host=None, submodule=None, level=None, username=None, message=None, attrs=None,):
        self.host = host
        self.submodule = submodule
        self.level = level
        self.username = username
        self.message = message
        self.attrs = attrs

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.host = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.submodule = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.level = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.username = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.message = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.MAP:
                    self.attrs = {}
                    (_ktype10, _vtype11, _size9) = iprot.readMapBegin()
                    for _i13 in range(_size9):
                        _key14 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        _val15 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.attrs[_key14] = _val15
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('LoggerRequest')
        if self.host is not None:
            oprot.writeFieldBegin('host', TType.STRING, 1)
            oprot.writeString(self.host.encode('utf-8') if sys.version_info[0] == 2 else self.host)
            oprot.writeFieldEnd()
        if self.submodule is not None:
            oprot.writeFieldBegin('submodule', TType.STRING, 2)
            oprot.writeString(self.submodule.encode('utf-8') if sys.version_info[0] == 2 else self.submodule)
            oprot.writeFieldEnd()
        if self.level is not None:
            oprot.writeFieldBegin('level', TType.STRING, 3)
            oprot.writeString(self.level.encode('utf-8') if sys.version_info[0] == 2 else self.level)
            oprot.writeFieldEnd()
        if self.username is not None:
            oprot.writeFieldBegin('username', TType.STRING, 4)
            oprot.writeString(self.username.encode('utf-8') if sys.version_info[0] == 2 else self.username)
            oprot.writeFieldEnd()
        if self.message is not None:
            oprot.writeFieldBegin('message', TType.STRING, 5)
            oprot.writeString(self.message.encode('utf-8') if sys.version_info[0] == 2 else self.message)
            oprot.writeFieldEnd()
        if self.attrs is not None:
            oprot.writeFieldBegin('attrs', TType.MAP, 6)
            oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.attrs))
            for kiter16, viter17 in self.attrs.items():
                oprot.writeString(kiter16.encode('utf-8') if sys.version_info[0] == 2 else kiter16)
                oprot.writeString(viter17.encode('utf-8') if sys.version_info[0] == 2 else viter17)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.host is None:
            raise TProtocolException(message='Required field host is unset!')
        if self.submodule is None:
            raise TProtocolException(message='Required field submodule is unset!')
        if self.level is None:
            raise TProtocolException(message='Required field level is unset!')
        if self.message is None:
            raise TProtocolException(message='Required field message is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class LoggerResponse(object):
    """
    Attributes:
     - code
     - message
    """

    thrift_spec = (
        None,  # 0
        (1, TType.I32, 'code', None, 0, ),  # 1
        (2, TType.STRING, 'message', 'UTF8', None, ),  # 2
    )

    def __init__(self, code=thrift_spec[1][4], message=None,):
        self.code = code
        self.message = message

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.code = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.message = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('LoggerResponse')
        if self.code is not None:
            oprot.writeFieldBegin('code', TType.I32, 1)
            oprot.writeI32(self.code)
            oprot.writeFieldEnd()
        if self.message is not None:
            oprot.writeFieldBegin('message', TType.STRING, 2)
            oprot.writeString(self.message.encode('utf-8') if sys.version_info[0] == 2 else self.message)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class RadiusException(TException):
    """
    Attributes:
     - code
     - message
    """

    thrift_spec = (
        None,  # 0
        (1, TType.I32, 'code', None, None, ),  # 1
        (2, TType.STRING, 'message', 'UTF8', None, ),  # 2
    )

    def __init__(self, code=None, message=None,):
        self.code = code
        self.message = message

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.code = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.message = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('RadiusException')
        if self.code is not None:
            oprot.writeFieldBegin('code', TType.I32, 1)
            oprot.writeI32(self.code)
            oprot.writeFieldEnd()
        if self.message is not None:
            oprot.writeFieldBegin('message', TType.STRING, 2)
            oprot.writeString(self.message.encode('utf-8') if sys.version_info[0] == 2 else self.message)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.code is None:
            raise TProtocolException(message='Required field code is unset!')
        return

    def __str__(self):
        return repr(self)

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
